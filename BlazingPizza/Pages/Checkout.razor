@page "/checkout"
@implements IDisposable
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <OrderReview Order="@Order"></OrderReview>
            </div>
            <div class="checkout-delivery-address">
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
            Place order
        </button>
        <DataAnnotationsValidator/>
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isError = false;
    EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    } 
    async Task PlaceOrder()
    {
        isError =  !editContext.Validate();
        if (!isError)
        {
            var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", Order);
            var orderId = await response.Content.ReadFromJsonAsync<int>();
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"/myorders/{orderId}");
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    } 

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}
